name: Deploy Docker to VM

on:
  push:
    branches: [ main ]

jobs:
  # ==================== CI PHASE ====================
  ci-test:
    name: 🔍 CI - Test Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run tests
      run: npm test

  ci-build:
    name: 🏗️ CI - Build Image
    runs-on: ubuntu-latest
    needs: ci-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/cicd-workshop-demo:latest

  # ==================== CD PHASE ====================
  cd-deploy:
    name: 🚀 CD - Deploy to VM
    runs-on: ubuntu-latest
    needs: ci-build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Setup SSH and deploy Docker container via serveo tunnel
    - name: Setup SSH and Deploy Container
      run: |
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add serveo.net to known hosts
        ssh-keyscan serveo.net >> ~/.ssh/known_hosts
        
        # Deploy Docker container via SSH with ProxyJump
        ssh -i ~/.ssh/deploy_key -o ProxyJump=serveo.net -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} '
          echo "🚀 Starting Docker deployment..."
          
          # Check Docker installation
          docker --version || { echo "Docker not installed!"; exit 1; }
          
          # Pull latest image
          echo "📥 Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/cicd-workshop-demo:latest
          
          # Stop and remove existing container
          echo "🛑 Stopping existing container..."
          docker stop my-app-container || echo "No container to stop"
          docker rm my-app-container || echo "No container to remove"
          
          # Run new container
          echo "▶️ Starting new container..."
          docker run -d -p 8080:3000 --name my-app-container ${{ secrets.DOCKERHUB_USERNAME }}/cicd-workshop-demo:latest
          
          # Verify container is running
          echo "✅ Container status:"
          docker ps | grep my-app-container
          
          echo "🌐 Docker app running at: http://localhost:8080"
          echo "📊 Container logs:"
          docker logs my-app-container --tail 10
        '

  cd-verify:
    name: ✅ CD - Verify Success
    runs-on: ubuntu-latest
    needs: cd-deploy
    
    steps:
    - name: Pipeline Summary
      run: |
        echo "🔍 CI Phase: Code tested & image built"
        echo "🚀 CD Phase: Container deployed to VM"
        echo "✅ Docker CI/CD Pipeline Complete!"